# 6. Regresión Lineal
load(file = "Input/Proc_data.RData")
# 5.3 Construcción de índice:
Proc_data <- mutate_all(Proc_data, as.numeric)
Proc_data <- Proc_data %>%
rowwise() %>%
mutate(indice_pobreza_rural = sum(nse, Nivel_educacional,Trabajo_oficio, Sistema_salud, Red_apoyo))
summary(Proc_data$indice_pobreza_rural)
ggplot(Proc_data, aes(x = indice_pobreza_rural)) +
geom_histogram(binwidth = 0.6, colour = "black", fill = "yellow") +
theme_bw() +
xlab("Indices de pobreza multidimensional Rural en la 8va región") +
ylab("Frecuencia")
Proc_data <- Proc_data %>%
mutate(sexo = case_when(sexo == 1 ~ 1, #Para Hombres
sexo == 2 ~ 0)) #Para Mujeres
# 6.2 El indice de pobreza rural lo creamos anteriormente
fit01 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
screenreg(list(fit01,fit02,fit03),custom.coef.names = labs01)
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
View(Proc_data)
#Ajustes iniciales:
options(scipen=999)
#Paquetes:
library(pacman)
pacman::p_load(haven,
sjlabelled,
dplyr, #Manipulacion de datos
stargazer, #Tablas
sjmisc, # Tablas
summarytools, # Tablas
kableExtra, #Tablas
sjPlot, #Tablas y gráficos
corrplot, # Correlaciones
sessioninfo, # Información de la sesión de trabajo
ggplot2,  # Para la mayoría de los gráficos
mice,   #Para imputar NA's
fastDummies,
ggeffects,
texreg)
# 1.Base de datos:
load(file = "Input/Proc_data.RData")
#Ajustes iniciales:
options(scipen=999)
#Paquetes:
library(pacman)
pacman::p_load(haven,
sjlabelled,
dplyr, #Manipulacion de datos
stargazer, #Tablas
sjmisc, # Tablas
summarytools, # Tablas
kableExtra, #Tablas
sjPlot, #Tablas y gráficos
corrplot, # Correlaciones
sessioninfo, # Información de la sesión de trabajo
ggplot2,  # Para la mayoría de los gráficos
mice,   #Para imputar NA's
fastDummies,
ggeffects,
texreg)
# 1.Base de datos:
load(file = "Input/Proc_data.RData")
summarytools::dfSummary(Proc_data, plain.ascii = FALSE)
print(summarytools::dfSummary(Proc_data), method='render')
#3.1 Gráficos:
frq(Proc_data$nse)
ggplot(Proc_data, aes(x=nse)) +
geom_bar(fill= "coral") +
labs (title= "Nivel Socioeconómico")
frq(Proc_data$Nivel_educacional)
ggplot(Proc_data, aes(x = Nivel_educacional)) +
geom_bar(fill = "coral") +
labs (title = "Nivel educativo en áreas rurales de la 8va región")
frq(Proc_data$Tipo_vivienda)
ggplot(Proc_data, aes(x = Tipo_vivienda)) +
geom_bar(fill = "coral") +
labs (title = "Tipo de vivienda predominante en áreas rurales de la 8va región")
frq(Proc_data$Sistema_salud)
ggplot(Proc_data, aes(x = Sistema_salud)) +
geom_bar(fill = "coral") +
labs (title = "Sistema previsional de Salud que predomina")
#Regresión lineal:
#Pasos previos:
Proc_data <- Proc_data %>%
mutate(sexo = case_when(sexo == 1 ~ 1, #Para Hombres
sexo == 2 ~ 0)) #Para Mujeres
#Modelos:
fit01 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
## Construcción de índice:
Proc_data <- mutate_all(Proc_data, as.numeric)
Proc_data <- Proc_data %>%
rowwise() %>%
mutate(indice_pobreza_rural = sum(nse, Nivel_educacional,Trabajo_oficio, Sistema_salud, Red_apoyo))
summary(Proc_data$indice_pobreza_rural)
ggplot(Proc_data, aes(x = indice_pobreza_rural)) +
geom_histogram(binwidth = 0.6, colour = "black", fill = "yellow") +
theme_bw() +
xlab("Indices de pobreza multidimensional Rural en la 8va región") +
ylab("Frecuencia")
#Regresión lineal:
#Pasos previos:
Proc_data <- Proc_data %>%
mutate(sexo = case_when(sexo == 1 ~ 1, #Para Hombres
sexo == 2 ~ 0)) #Para Mujeres
#Modelos:
fit01 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
screenreg(list(fit01,fit02,fit03),custom.coef.names = labs01)
#Regresión lineal:
#Pasos previos:
Proc_data <- Proc_data %>%
mutate(sexo = case_when(sexo == 1 ~ 1, #Para Hombres
sexo == 2 ~ 0)) #Para Mujeres
#Modelos:
fit01 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
screenreg(list(fit01,fit02,fit03),custom.coef.names = labs01)
#Regresión lineal:
#Pasos previos:
Proc_data <- Proc_data %>%
mutate(sexo = case_when(sexo == 1 ~ 1, #Para Hombres
sexo == 2 ~ 0)) #Para Mujeres
#Modelos:
fit01 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
# 6.2 El indice de pobreza rural lo creamos anteriormente
fit01 <- lm(indice_pobreza_rural ~ 1, data=Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit04 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
screenreg(list(fit01,fit02,fit03),custom.coef.names = labs01)
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
Proc_data <- Proc_data %>%
mutate(sexo = case_when(sexo == 1 ~ 1, #Para Hombres
sexo == 2 ~ 0)) #Para Mujeres
# 6.2 El indice de pobreza rural lo creamos anteriormente
fit01 <- lm(indice_pobreza_rural ~ 1, data=Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit04 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
screenreg(list(fit01,fit02,fit03),custom.coef.names = labs01)
## Construcción de índice:
Proc_data <- mutate_all(Proc_data, as.numeric)
Proc_data <- Proc_data %>%
rowwise() %>%
mutate(indice_pobreza_rural = sum(nse, Nivel_educacional,Trabajo_oficio, Sistema_salud, Red_apoyo))
summary(Proc_data$indice_pobreza_rural)
ggplot(Proc_data, aes(x = indice_pobreza_rural)) +
geom_histogram(binwidth = 0.6, colour = "black", fill = "yellow") +
theme_bw() +
xlab("Indices de pobreza multidimensional Rural en la 8va región") +
ylab("Frecuencia")
#Regresión lineal:
#Pasos previos:
Proc_data <- Proc_data %>%
mutate(sexo = case_when(sexo == 1 ~ 1, #Para Hombres
sexo == 2 ~ 0)) #Para Mujeres
#Modelos:
fit01 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"."Modelo 4"),
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3","Modelo 4"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
screenreg(list(fit01,fit02,fit03,fit04),custom.coef.names = labs01)
# 6.2 El indice de pobreza rural lo creamos anteriormente
fit01 <- lm(indice_pobreza_rural ~ 1, data=Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit04 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
screenreg(list(fit01,fit02,fit03,fit04),custom.coef.names = labs01)
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3","Modelo 4"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
###################################XD
# 6.2 El índice de pobreza rural lo creamos anteriormente
fit01 <- lm(indice_pobreza_rural ~ 1, data = Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit04 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
# Definir etiquetas para cada modelo
labs01 <- list(
c("Intercepto"),
c("Intercepto", "Sexo (mujer)"),
c("Intercepto", "Sexo (mujer)", "Edad"),
c("Intercepto", "Sexo (mujer)", "Edad", "Tipo de vivienda")
)
# Mostrar los modelos en la pantalla con screenreg
screenreg(list(fit01, fit02, fit03, fit04), custom.coef.names = labs01[[4]])
# htmlreg para que se vea en el sitio web
knitreg(list(fit01, fit02, fit03, fit04),
custom.model.names = c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
custom.coef.names = labs01[[4]])
###################################XD
# 6.2 El índice de pobreza rural lo creamos anteriormente
fit01 <- lm(indice_pobreza_rural ~ 1, data = Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit04 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
# Definir etiquetas para cada modelo
labs01 <- list(
c("Intercepto"),
c("Intercepto", "Sexo (mujer)"),
c("Intercepto", "Sexo (mujer)", "Edad"),
c("Intercepto", "Sexo (mujer)", "Edad", "Tipo de vivienda")
)
# Mostrar los modelos en la pantalla con screenreg
screenreg(list(fit01, fit02, fit03, fit04),
custom.model.names = c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
custom.coef.names = unlist(labs01))
# htmlreg para que se vea en el sitio web
knitreg(list(fit01, fit02, fit03, fit04),
custom.model.names = c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
custom.coef.names = unlist(labs01))
# Función auxiliar para obtener coeficientes adecuados
get_coef_names <- function(fit, labels) {
coef_names <- names(coef(fit))
return(labels[1:length(coef_names)])
}
# Aplicar esta función a cada modelo
custom_labels <- lapply(list(fit01, fit02, fit03, fit04), get_coef_names, labels = labs01[[4]])
# Mostrar los modelos en la pantalla con screenreg
screenreg(list(fit01, fit02, fit03, fit04),
custom.model.names = c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
custom.coef.names = custom_labels)
# htmlreg para que se vea en el sitio web
knitreg(list(fit01, fit02, fit03, fit04),
custom.model.names = c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
custom.coef.names = custom_labels)
#Ajustes iniciales:
options(scipen=999)
#Paquetes:
library(pacman)
pacman::p_load(haven,
sjlabelled,
dplyr, #Manipulacion de datos
stargazer, #Tablas
sjmisc, # Tablas
summarytools, # Tablas
kableExtra, #Tablas
sjPlot, #Tablas y gráficos
corrplot, # Correlaciones
sessioninfo, # Información de la sesión de trabajo
ggplot2,  # Para la mayoría de los gráficos
mice,   #Para imputar NA's
fastDummies,
ggeffects,
texreg)
# 1.Base de datos:
load(file = "Input/Proc_data.RData")
summarytools::dfSummary(Proc_data, plain.ascii = FALSE)
print(summarytools::dfSummary(Proc_data), method='render')
#3.1 Gráficos:
frq(Proc_data$nse)
ggplot(Proc_data, aes(x=nse)) +
geom_bar(fill= "coral") +
labs (title= "Nivel Socioeconómico")
frq(Proc_data$Nivel_educacional)
ggplot(Proc_data, aes(x = Nivel_educacional)) +
geom_bar(fill = "coral") +
labs (title = "Nivel educativo en áreas rurales de la 8va región")
frq(Proc_data$Tipo_vivienda)
ggplot(Proc_data, aes(x = Tipo_vivienda)) +
geom_bar(fill = "coral") +
labs (title = "Tipo de vivienda predominante en áreas rurales de la 8va región")
frq(Proc_data$Sistema_salud)
ggplot(Proc_data, aes(x = Sistema_salud)) +
geom_bar(fill = "coral") +
labs (title = "Sistema previsional de Salud que predomina")
#4.Correlación:
## Seleccionamos las variables de interés:
Proc_data_cor <- Proc_data %>%
select(nse,
Nivel_educacional,
Trabajo_oficio,
Sistema_salud,
Red_apoyo,
Tipo_vivienda)
## Realizamos la correlación
Proc_data_cor <- mutate_all(Proc_data_cor, as.numeric)
cor_proc_data <- cor(Proc_data_cor,
use = "complete.obs")
cor_proc_data
corrplot.mixed(cor_proc_data)
#5.Confiabilidad del conjunto:
## Alpha de Cronbach:
psych::alpha(Proc_data_cor, check.keys = TRUE)
psych::alpha(dplyr::select(Proc_data_cor, nse,Nivel_educacional, Trabajo_oficio, Sistema_salud),check.keys = TRUE)
## Construcción de índice:
Proc_data <- mutate_all(Proc_data, as.numeric)
Proc_data <- Proc_data %>%
rowwise() %>%
mutate(indice_pobreza_rural = sum(nse, Nivel_educacional,Trabajo_oficio, Sistema_salud, Red_apoyo))
summary(Proc_data$indice_pobreza_rural)
ggplot(Proc_data, aes(x = indice_pobreza_rural)) +
geom_histogram(binwidth = 0.6, colour = "black", fill = "yellow") +
theme_bw() +
xlab("Indices de pobreza multidimensional Rural en la 8va región") +
ylab("Frecuencia")
#Regresión lineal:
#Pasos previos:
Proc_data <- Proc_data %>%
mutate(sexo = case_when(sexo == 1 ~ 1, #Para Hombres
sexo == 2 ~ 0)) #Para Mujeres
#Modelos:
fit01 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
screenreg(list(fit01,fit02,fit03,fit04),custom.coef.names = labs01)
screenreg(list(fit01,fit02,fit03),custom.coef.names = labs01)
screenreg(list(fit01,fit02,fit03),custom.coef.names = labs01)
load(file = "Input/Proc_data.RData")
# 3.7 Comprobamos
names(Proc_data)
view_df(Proc_data)
pacman::p_load(haven,
sjlabelled,
dplyr, #Manipulacion de datos
stargazer, #Tablas
sjmisc, # Tablas
summarytools, # Tablas
kableExtra, #Tablas
sjPlot, #Tablas y gráficos
corrplot, # Correlaciones
sessioninfo, # Información de la sesión de trabajo
ggplot2,  # Para la mayoría de los gráficos
mice,   #Para imputar NA's
fastDummies,
ggeffects,
texreg)
# 3.7 Comprobamos
names(Proc_data)
view_df(Proc_data)
frq(Proc_data$edad)
frq(Proc_data$sexo)
frq(Proc_data$region)
frq(Proc_data$area)
frq(Proc_data$nse)
frq(Proc_data$Nivel_educacional)
frq(Proc_data$Trabajo_oficio)
frq(Proc_data$Sistema_salud)
frq(Proc_data$Red_apoyo)
frq(Proc_data$Tipo_vivienda)
# 4. Descriptivos:
summarytools::dfSummary(Proc_data, plain.ascii = FALSE)
view(dfSummary(Proc_data, headings=FALSE))
# 4.1Graficos
graf_nse <- ggplot(Proc_data, aes(x = nse)) +
geom_bar(fill = "coral") +
labs (title = "Nivel socioeconómico")
graf_educ <- ggplot(Proc_data, aes(x = Nivel_educacional))+
geom_bar(fill = "coral") +
labs(title = "Nivel educativo")
graf_Trabajo <- ggplot(Proc_data, aes(x = Trabajo_oficio))+
geom_bar(fill = "coral") +
labs(title = "Oficio u ocupación")
graf_Salud <- ggplot(Proc_data, aes(x = Sistema_salud))+
geom_bar(fill = "coral") +
labs(title = "Sistema de previsional de salud")
graf_Apoyo <- ggplot(Proc_data, aes(x = Red_apoyo))+
geom_bar(fill = "coral") +
labs (title = "Red de apoyo")
graf_Viv <- ggplot(Proc_data, aes(x = Tipo_vivienda))+
geom_bar(fill = "coral") +
labs(title = "Tipo de Vivienda")
#5. Asociación de variables:
dim(Proc_data)
sjmisc::descr(Proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n")) %>%
kable(.,"markdown")
# 5.1 Correlación de variables: Eliminamos la región y el area, para ver como se comportan las variables que explican el fenómeno
Proc_data_cor <- Proc_data %>%
select(nse,
Nivel_educacional,
Trabajo_oficio,
Sistema_salud,
Red_apoyo,
Tipo_vivienda)
Proc_data_cor <- mutate_all(Proc_data_cor, as.numeric)
cor_proc_data <- cor(Proc_data_cor,
use = "complete.obs")
cor_proc_data
sjPlot::tab_corr(Proc_data_cor,
triangle = "lower")
corrplot.mixed(cor_proc_data)
## Alpha de Cronbach:
psych::alpha(Proc_data_cor, check.keys = TRUE)
psych::alpha(dplyr::select(Proc_data_cor, nse,Nivel_educacional, Trabajo_oficio, Sistema_salud),check.keys = TRUE)
# 5.3 Construcción de índice:
Proc_data <- mutate_all(Proc_data, as.numeric)
Proc_data <- Proc_data %>%
rowwise() %>%
mutate(indice_pobreza_rural = sum(nse, Nivel_educacional,Trabajo_oficio, Sistema_salud, Red_apoyo))
summary(Proc_data$indice_pobreza_rural)
ggplot(Proc_data, aes(x = indice_pobreza_rural)) +
geom_histogram(binwidth = 0.6, colour = "black", fill = "yellow") +
theme_bw() +
xlab("Indices de pobreza multidimensional Rural en la 8va región") +
ylab("Frecuencia")
graf_IPC <- ggplot(Proc_data, aes(x = indice_pobreza_rural)) +
geom_histogram(binwidth = 0.6, colour = "black", fill = "yellow") +
theme_bw() +
xlab("Indices de pobreza multidimensional Rural en la 8va región") +
ylab("Frecuencia")
ggsave(graf_IPC, file="Output/graf_IPC.png")
Proc_data <- Proc_data %>%
mutate(sexo = case_when(sexo == 1 ~ 1, #Para Hombres
sexo == 2 ~ 0)) #Para Mujeres
#Modelos:
fit01 <- lm(indice_pobreza_rural ~ sexo, data = Proc_data)
fit02 <- lm(indice_pobreza_rural ~ sexo + edad, data = Proc_data)
fit03 <- lm(indice_pobreza_rural ~ sexo + edad + Tipo_vivienda, data = Proc_data)
labs01 <- c("Intercepto","Sexo (mujer)","Edad", "Tipo de vivienda")
screenreg(list(fit01,fit02,fit03),custom.coef.names = labs01)
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
# Función auxiliar para obtener coeficientes adecuados
get_coef_names <- function(fit, labels) {
coef_names <- names(coef(fit))
return(labels[1:length(coef_names)])
}
# Aplicar esta función a cada modelo
custom_labels <- lapply(list(fit01, fit02, fit03, fit04), get_coef_names, labels = labs01[[4]])
# Mostrar los modelos en la pantalla con screenreg
screenreg(list(fit01, fit02, fit03, fit04),
custom.model.names = c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
custom.coef.names = custom_labels)
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
# htmlreg para que se vea en el sitio web
knitreg(list(fit01,fit02,fit03),
custom.model.names = c("Modelo 1","Modelo 2","Modelo 3"),
custom.coef.names = c("Intercepto",
"Sexo (mujer)",
"Edad",
"Tipo de vivienda"))
